'''
7.1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен
принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух
матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
первым элементом первой строки второй матрицы и т.д.
'''

class Matrix():

    def __init__(self, my_list):
        self.my_list = my_list

    def __add__(self, other):
        glob_list = []
        inner_list = []
        for i in range(len(self.my_list)):  # 0 1 2
            for b in range(len(self.my_list[i])): # 0 1
                in_lst = self.my_list[i][b] + other.my_list[i][b]
                inner_list.append(in_lst)
            copy_list = inner_list.copy()
            glob_list.append(copy_list)
            inner_list.clear()
        return f"Матрица после сложения 2х матриц: \n" \
               f"--------- \n" \
               f"{glob_list[0][0]} - {glob_list[0][1]}\n" \
               f"{glob_list[1][0]} - {glob_list[1][1]}\n" \
               f"{glob_list[2][0]} - {glob_list[2][1]}\n" \
               f"---------"

    def __str__(self):
        return f"Матрица: \n" \
               f"--------- \n" \
               f"{self.my_list[0][0]} - {self.my_list[0][1]}\n" \
               f"{self.my_list[1][0]} - {self.my_list[1][1]}\n" \
               f"{self.my_list[2][0]} - {self.my_list[2][1]}\n" \
               f"---------"


m1 = Matrix([[123, 145], [223, 245], [312, 334]])
m2 = Matrix([[423, 445], [523, 545], [612, 634]])
